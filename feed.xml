<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.0">Jekyll</generator><link href="https://robygauthier.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://robygauthier.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-28T20:43:47-05:00</updated><id>https://robygauthier.github.io/feed.xml</id><title type="html">Roby Gauthier, Ph.D.</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Calculate radial distribution function in Gromacs</title><link href="https://robygauthier.github.io/coding,/chemistry/2023/08/27/GroRDF.html" rel="alternate" type="text/html" title="Calculate radial distribution function in Gromacs"/><published>2023-08-27T07:43:00-04:00</published><updated>2023-08-27T07:43:00-04:00</updated><id>https://robygauthier.github.io/coding,/chemistry/2023/08/27/GroRDF</id><content type="html" xml:base="https://robygauthier.github.io/coding,/chemistry/2023/08/27/GroRDF.html"><![CDATA[<p>Today we are going to go through how to calculate the radial distribution function (RDF) in Gromacs of MOL1 with a lithium ion as a reference. For this, both the .tpr and .trr files obtained from a npt run are required to create a .xtc file. After the .xtc is obtained, one can calculate the RDF of this system:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="c1">#!/bin/bash
#SBATCH -J test # Job name
#SBATCH -n 1 # Number of total cores
#SBATCH -N 1 # Number of nodes
#SBATCH -A name
#SBATCH -p cpu
#SBATCH -t 2-00:00:00
#SBATCH --mem-per-cpu=6000 # Memory pool for all cores in MB
#SBATCH -e test_%j.err
#SBATCH -o test_%j.out # File to which STDOUT will be written %j is the job #
</span><span class="n">echo</span> <span class="sh">"</span><span class="s">Job started on `hostname` at `date`</span><span class="sh">"</span>
<span class="n">module</span> <span class="n">load</span> <span class="n">openmpi</span>
<span class="n">spack</span> <span class="n">load</span> <span class="n">gromacs</span>
<span class="nb">set</span> <span class="o">-</span><span class="n">e</span>

<span class="n">echo</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span> <span class="o">|</span><span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">trjconv</span> <span class="o">-</span><span class="n">s</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">tpr</span> <span class="o">-</span><span class="n">f</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">trr</span> <span class="o">-</span><span class="n">o</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">xtc</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">rdf</span> <span class="o">-</span><span class="n">s</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">tpr</span> <span class="o">-</span><span class="n">f</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">xtc</span> <span class="o">-</span><span class="n">o</span> <span class="n">rdf_Li</span><span class="o">-</span><span class="n">MOL1</span><span class="p">.</span><span class="n">xvg</span> <span class="o">-</span><span class="n">ref</span> <span class="sh">'</span><span class="s">Li</span><span class="sh">'</span> <span class="o">-</span><span class="n">sel</span> <span class="sh">'</span><span class="s">MOL1</span><span class="sh">'</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">Job Ended at `date`</span><span class="sh">"</span></code></pre></figure> <p>Here -ref is the reference atom that correspond to the zero of the x-axis of the RDF. Then, -sel is the molecule of interest. To create the RDF, the .tpr and .xtc files are required and a .xvg is the output. The .xvg output can be read using a text editor. In that file, we first have lines that start with # then with @. Those line are not required to graph the result. After those line, two columns are present which represent the x-axis and the y-axis of the RDF. Those column can then be used to graph the results.</p>]]></content><author><name></name></author><category term="coding,"/><category term="chemistry"/><category term="coding,"/><category term="chemistry"/><summary type="html"><![CDATA[Today we are going to go through how to calculate the radial distribution function (RDF) in Gromacs of MOL1 with a lithium ion as a reference. For this, both the .tpr and .trr files obtained from a npt run are required to create a .xtc file. After the .xtc is obtained, one can calculate the RDF of this system: #!/bin/bash #SBATCH -J test # Job name #SBATCH -n 1 # Number of total cores #SBATCH -N 1 # Number of nodes #SBATCH -A name #SBATCH -p cpu #SBATCH -t 2-00:00:00 #SBATCH --mem-per-cpu=6000 # Memory pool for all cores in MB #SBATCH -e test_%j.err #SBATCH -o test_%j.out # File to which STDOUT will be written %j is the job # echo "Job started on `hostname` at `date`" module load openmpi spack load gromacs set -e echo "0" |srun --mpi=pmix gmx_mpi trjconv -s nptrun.tpr -f nptrun.trr -o nptrun.xtc echo " " srun --mpi=pmix gmx_mpi rdf -s nptrun.tpr -f nptrun.xtc -o rdf_Li-MOL1.xvg -ref 'Li' -sel 'MOL1' echo " " echo "Job Ended at `date`" Here -ref is the reference atom that correspond to the zero of the x-axis of the RDF. Then, -sel is the molecule of interest. To create the RDF, the .tpr and .xtc files are required and a .xvg is the output. The .xvg output can be read using a text editor. In that file, we first have lines that start with # then with @. Those line are not required to graph the result. After those line, two columns are present which represent the x-axis and the y-axis of the RDF. Those column can then be used to graph the results.]]></summary></entry><entry><title type="html">Installing and running Gromacs on a HPC.</title><link href="https://robygauthier.github.io/coding,/chemistry/2023/08/26/GroHPC.html" rel="alternate" type="text/html" title="Installing and running Gromacs on a HPC."/><published>2023-08-26T19:36:00-04:00</published><updated>2023-08-26T19:36:00-04:00</updated><id>https://robygauthier.github.io/coding,/chemistry/2023/08/26/GroHPC</id><content type="html" xml:base="https://robygauthier.github.io/coding,/chemistry/2023/08/26/GroHPC.html"><![CDATA[<p>Today we are going to install and run Gromacs on a high performance computer (HPC). The installation can be done by writing first the following in the command shell (this should be run using the slurm scheduler):</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">spack</span> <span class="n">install</span> <span class="n">gromacs</span> <span class="o">^</span><span class="n">openmpi</span> <span class="n">schedulers</span><span class="o">=</span><span class="n">slurm</span> <span class="n">pmi</span><span class="o">=</span><span class="n">true</span></code></pre></figure> <p>After installation is finished. We can then run a mixture of two molecules MOL1 and MOL2, with 100 molecules of each, using the following bash code and the appropriate files in order to calculate density of this mixture:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="c1">#!/bin/bash
#SBATCH -J test # Job name
#SBATCH -n 1 # Number of total cores
#SBATCH -N 1 # Number of nodes
#SBATCH -A name
#SBATCH -p cpu
#SBATCH -t 2-00:00:00
#SBATCH --mem-per-cpu=6000 # Memory pool for all cores in MB
#SBATCH -e test_%j.err
#SBATCH -o test_%j.out # File to which STDOUT will be written %j is the job #
</span><span class="n">echo</span> <span class="sh">"</span><span class="s">Job started on `hostname` at `date`</span><span class="sh">"</span>
<span class="n">module</span> <span class="n">load</span> <span class="n">openmpi</span>
<span class="n">spack</span> <span class="n">load</span> <span class="n">gromacs</span>
<span class="n">BOXSIZE</span><span class="o">=</span><span class="mi">10</span>
<span class="n">NMOLECULE1</span><span class="o">=</span><span class="mi">100</span>
<span class="n">NMOLECULE2</span><span class="o">=</span><span class="mi">100</span>
<span class="n">NAME1</span><span class="o">=</span><span class="n">MOL1</span>
<span class="n">NAME2</span><span class="o">=</span><span class="n">MOL2</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">insert</span><span class="o">-</span><span class="n">molecules</span> <span class="o">-</span><span class="n">ci</span> <span class="err">$</span><span class="p">{</span><span class="n">NAME1</span><span class="p">}.</span><span class="n">gro</span> <span class="o">-</span><span class="n">o</span> <span class="err">$</span><span class="p">{</span><span class="n">NAME1</span><span class="p">}</span><span class="n">_box</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">box</span> <span class="err">$</span><span class="n">BOXSIZE</span> <span class="err">$</span><span class="n">BOXSIZE</span> <span class="err">$</span><span class="n">BOXSIZE</span> <span class="o">-</span><span class="n">nmol</span> <span class="err">$</span><span class="n">NMOLECULE1</span> <span class="o">-</span><span class="n">rot</span> <span class="n">xyz</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">insert</span><span class="o">-</span><span class="n">molecules</span> <span class="o">-</span><span class="n">f</span> <span class="err">$</span><span class="p">{</span><span class="n">NAME1</span><span class="p">}</span><span class="n">_box</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">ci</span> <span class="err">$</span><span class="p">{</span><span class="n">NAME2</span><span class="p">}.</span><span class="n">gro</span> <span class="o">-</span><span class="n">o</span> <span class="n">mix_box</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">nmol</span> <span class="err">$</span><span class="n">NMOLECULE2</span> <span class="o">-</span><span class="n">rot</span> <span class="n">xyz</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">grompp</span> <span class="o">-</span><span class="n">f</span> <span class="n">minim</span><span class="p">.</span><span class="n">mdp</span> <span class="o">-</span><span class="n">c</span> <span class="n">mix_box</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">p</span> <span class="n">topol</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span><span class="n">o</span> <span class="n">em</span><span class="p">.</span><span class="n">tpr</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">mdrun</span> <span class="o">-</span><span class="n">s</span> <span class="n">em</span><span class="p">.</span><span class="n">tpr</span> <span class="o">-</span><span class="n">mp</span> <span class="n">topol</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span><span class="n">c</span> <span class="n">em</span><span class="p">.</span><span class="n">gro</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">Minimization Ended at `date`</span><span class="sh">"</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">grompp</span> <span class="o">-</span><span class="n">f</span> <span class="n">nvt</span><span class="p">.</span><span class="n">mdp</span> <span class="o">-</span><span class="n">c</span> <span class="n">em</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">p</span> <span class="n">topol</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span><span class="n">o</span> <span class="n">nvt</span><span class="p">.</span><span class="n">tpr</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">mdrun</span> <span class="o">-</span><span class="n">s</span> <span class="n">nvt</span><span class="p">.</span><span class="n">tpr</span> <span class="o">-</span><span class="n">mp</span> <span class="n">topol</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span><span class="n">cpo</span> <span class="n">nvt</span><span class="p">.</span><span class="n">cpt</span> <span class="o">-</span><span class="n">c</span> <span class="n">nvt</span><span class="p">.</span><span class="n">gro</span> 
<span class="n">echo</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">NVT Ended at `date`</span><span class="sh">"</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">grompp</span> <span class="o">-</span><span class="n">f</span> <span class="n">npt</span><span class="p">.</span><span class="n">mdp</span> <span class="o">-</span><span class="n">c</span> <span class="n">nvt</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">t</span> <span class="n">nvt</span><span class="p">.</span><span class="n">cpt</span> <span class="o">-</span><span class="n">p</span> <span class="n">topol</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span><span class="n">o</span> <span class="n">npt</span><span class="p">.</span><span class="n">tpr</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">mdrun</span> <span class="o">-</span><span class="n">s</span> <span class="n">npt</span><span class="p">.</span><span class="n">tpr</span> <span class="o">-</span><span class="n">mp</span> <span class="n">topol</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span><span class="n">cpo</span> <span class="n">npt</span><span class="p">.</span><span class="n">cpt</span> <span class="o">-</span><span class="n">c</span> <span class="n">npt</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">e</span> <span class="n">npt</span><span class="p">.</span><span class="n">edr</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">NPT Ended at `date`</span><span class="sh">"</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">grompp</span> <span class="o">-</span><span class="n">f</span> <span class="n">npt</span><span class="p">.</span><span class="n">mdp</span> <span class="o">-</span><span class="n">c</span> <span class="n">npt</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">t</span> <span class="n">npt</span><span class="p">.</span><span class="n">cpt</span> <span class="o">-</span><span class="n">p</span> <span class="n">topol</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span><span class="n">o</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">tpr</span>
<span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="n">gmx_mpi</span> <span class="n">mdrun</span> <span class="o">-</span><span class="n">s</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">tpr</span> <span class="o">-</span><span class="n">mp</span> <span class="n">topol</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span><span class="n">cpo</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">cpt</span> <span class="o">-</span><span class="n">c</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">gro</span> <span class="o">-</span><span class="n">e</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">edr</span> <span class="o">-</span><span class="n">o</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">trr</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">NPT Run Ended at `date`</span><span class="sh">"</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">22 0</span><span class="sh">"</span> <span class="o">|</span> <span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="o">--</span><span class="n">partition</span><span class="o">=</span><span class="n">cpu</span>  <span class="o">-</span><span class="n">N</span> <span class="mi">1</span> <span class="n">gmx_mpi</span> <span class="n">energy</span> <span class="o">-</span><span class="n">f</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">edr</span> <span class="o">-</span><span class="n">s</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">tpr</span> <span class="o">-</span><span class="n">o</span> <span class="n">density</span><span class="p">.</span><span class="n">xvg</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span> <span class="o">|</span> <span class="n">srun</span> <span class="o">--</span><span class="n">mpi</span><span class="o">=</span><span class="n">pmix</span> <span class="o">--</span><span class="n">partition</span><span class="o">=</span><span class="n">cpu</span>  <span class="o">-</span><span class="n">N</span> <span class="mi">1</span> <span class="n">gmx_mpi</span> <span class="n">dipoles</span> <span class="o">-</span><span class="n">f</span> <span class="n">traj</span><span class="p">.</span><span class="n">trr</span>  <span class="o">-</span><span class="n">s</span> <span class="n">nptrun</span><span class="p">.</span><span class="n">tpr</span> <span class="o">-</span><span class="n">eps</span> <span class="n">epsilon</span><span class="p">.</span><span class="n">xvg</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">Job Ended at `date`</span><span class="sh">"</span></code></pre></figure> <p>This will output the values of the density and of the permittivity of the mixture in the .out file.</p>]]></content><author><name></name></author><category term="coding,"/><category term="chemistry"/><category term="coding,"/><category term="chemistry"/><summary type="html"><![CDATA[Today we are going to install and run Gromacs on a high performance computer (HPC). The installation can be done by writing first the following in the command shell (this should be run using the slurm scheduler): spack install gromacs ^openmpi schedulers=slurm pmi=true After installation is finished. We can then run a mixture of two molecules MOL1 and MOL2, with 100 molecules of each, using the following bash code and the appropriate files in order to calculate density of this mixture: #!/bin/bash #SBATCH -J test # Job name #SBATCH -n 1 # Number of total cores #SBATCH -N 1 # Number of nodes #SBATCH -A name #SBATCH -p cpu #SBATCH -t 2-00:00:00 #SBATCH --mem-per-cpu=6000 # Memory pool for all cores in MB #SBATCH -e test_%j.err #SBATCH -o test_%j.out # File to which STDOUT will be written %j is the job # echo "Job started on `hostname` at `date`" module load openmpi spack load gromacs BOXSIZE=10 NMOLECULE1=100 NMOLECULE2=100 NAME1=MOL1 NAME2=MOL2 srun --mpi=pmix gmx_mpi insert-molecules -ci ${NAME1}.gro -o ${NAME1}_box.gro -box $BOXSIZE $BOXSIZE $BOXSIZE -nmol $NMOLECULE1 -rot xyz srun --mpi=pmix gmx_mpi insert-molecules -f ${NAME1}_box.gro -ci ${NAME2}.gro -o mix_box.gro -nmol $NMOLECULE2 -rot xyz srun --mpi=pmix gmx_mpi grompp -f minim.mdp -c mix_box.gro -p topol.top -o em.tpr srun --mpi=pmix gmx_mpi mdrun -s em.tpr -mp topol.top -c em.gro echo " " echo "Minimization Ended at `date`" srun --mpi=pmix gmx_mpi grompp -f nvt.mdp -c em.gro -p topol.top -o nvt.tpr srun --mpi=pmix gmx_mpi mdrun -s nvt.tpr -mp topol.top -cpo nvt.cpt -c nvt.gro echo " " echo "NVT Ended at `date`" srun --mpi=pmix gmx_mpi grompp -f npt.mdp -c nvt.gro -t nvt.cpt -p topol.top -o npt.tpr srun --mpi=pmix gmx_mpi mdrun -s npt.tpr -mp topol.top -cpo npt.cpt -c npt.gro -e npt.edr echo " " echo "NPT Ended at `date`" srun --mpi=pmix gmx_mpi grompp -f npt.mdp -c npt.gro -t npt.cpt -p topol.top -o nptrun.tpr srun --mpi=pmix gmx_mpi mdrun -s nptrun.tpr -mp topol.top -cpo nptrun.cpt -c nptrun.gro -e nptrun.edr -o nptrun.trr echo " " echo "NPT Run Ended at `date`" echo "22 0" | srun --mpi=pmix --partition=cpu -N 1 gmx_mpi energy -f nptrun.edr -s nptrun.tpr -o density.xvg echo "0" | srun --mpi=pmix --partition=cpu -N 1 gmx_mpi dipoles -f traj.trr -s nptrun.tpr -eps epsilon.xvg echo " " echo "Job Ended at `date`" This will output the values of the density and of the permittivity of the mixture in the .out file.]]></summary></entry><entry><title type="html">Using the Pandas library to process battery cycling data.</title><link href="https://robygauthier.github.io/coding,/battery/2023/08/26/Pandas.html" rel="alternate" type="text/html" title="Using the Pandas library to process battery cycling data."/><published>2023-08-26T17:31:00-04:00</published><updated>2023-08-26T17:31:00-04:00</updated><id>https://robygauthier.github.io/coding,/battery/2023/08/26/Pandas</id><content type="html" xml:base="https://robygauthier.github.io/coding,/battery/2023/08/26/Pandas.html"><![CDATA[<p>Today we going to see how to use the python library Pandas on some battery cycling data. Pandas is useful to process Excel files efficiently. Here we will calculate delta V values of a cell versus cycle number from the voltage versus time data. delta V is closely related to the resistance of the cell.</p> <p>Let’s start by importing the Pandas library:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span></code></pre></figure> <p>Now we are ready to import the data. Here we will import the third sheet from a .xls of a cell with a Cell ID of 87. The output df is a Pandas dataframe.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_excel</span><span class="p">(</span><span class="sh">'</span><span class="s">CellID87.xls</span><span class="sh">'</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span></code></pre></figure> <p>Now is type to start preprocessing. The data in question is cycling data from a Neware cycler. Let’s first remove the part of the data that correspond to when the cell is in status ‘rest’, which mean the cell is not charging or discharging, but just resting, as this data is not needed for the calculation of delta V. Below we are essentially saying: take the row of the dataframe were values from column ‘Status’ are not equal to ‘Rest’.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Status</span><span class="sh">'</span><span class="p">]</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">Rest</span><span class="sh">'</span><span class="p">]</span></code></pre></figure> <p>On the block of code, we first take the row of the dataframe were values from column ‘Status’ are equal to ‘CC_DChg’ for the discharge curves (df_disch) and equal to ‘CCCV_Chg’ for the charge curves (df_charg). Then, for the discharge curves, and similarly for the charge curves, we group all values that have all the same step values and take the average. However, we are here only interested in the average of the voltage for each steps as well as the cycle numbers.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">df_disch</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Status</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="sh">'</span><span class="s">CC_DChg</span><span class="sh">'</span><span class="p">].</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">Step</span><span class="sh">'</span><span class="p">).</span><span class="nf">mean</span><span class="p">(</span><span class="n">numeric_only</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_charg</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Status</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="sh">'</span><span class="s">CCCV_Chg</span><span class="sh">'</span><span class="p">].</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">Step</span><span class="sh">'</span><span class="p">).</span><span class="nf">mean</span><span class="p">(</span><span class="n">numeric_only</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure> <p>We then merge both dataframe df_disch and df_charg into a single dataframe df0. We do this merging such that the cycle number value are the same for both for a single row in df0.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">df0</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">df_disch</span><span class="p">,</span> <span class="n">df_charg</span><span class="p">,</span> <span class="n">on</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Cycle</span><span class="sh">'</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">outer</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <p>We then substract the value of average voltage for charge steps from the average voltage for discharge steps.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">df0</span><span class="p">[</span><span class="sh">'</span><span class="s">delta_V</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df0</span><span class="p">[</span><span class="sh">'</span><span class="s">Voltage(V)_y</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">df0</span><span class="p">[</span><span class="sh">'</span><span class="s">Voltage(V)_x</span><span class="sh">'</span><span class="p">]</span></code></pre></figure> <p>We then reorganise the data so that it can be plotted as delta V versus cycle number.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">df01</span> <span class="o">=</span> <span class="n">df0</span><span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">Cycle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">df01</span><span class="p">[</span><span class="sh">'</span><span class="s">delta_V</span><span class="sh">'</span><span class="p">].</span><span class="nf">to_frame</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">df2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Cycle</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="sh">'</span><span class="s">delta_V</span><span class="sh">'</span><span class="p">,</span><span class="n">kind</span><span class="o">=</span><span class="sh">'</span><span class="s">scatter</span><span class="sh">'</span><span class="p">,</span><span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.2</span><span class="p">))</span></code></pre></figure> <p>The result is the following graph:</p> <div class="mt-3"> <figure> <picture> <img src="/assets/img/deltaV.png" class="img-fluid rounded z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Graph of delta V as function of cycle number. </div> </div>]]></content><author><name></name></author><category term="coding,"/><category term="battery"/><category term="coding,"/><category term="battery"/><summary type="html"><![CDATA[Today we going to see how to use the python library Pandas on some battery cycling data. Pandas is useful to process Excel files efficiently. Here we will calculate delta V values of a cell versus cycle number from the voltage versus time data. delta V is closely related to the resistance of the cell. Let’s start by importing the Pandas library: import pandas as pd Now we are ready to import the data. Here we will import the third sheet from a .xls of a cell with a Cell ID of 87. The output df is a Pandas dataframe. df=pd.read_excel('CellID87.xls', sheet_name=3) Now is type to start preprocessing. The data in question is cycling data from a Neware cycler. Let’s first remove the part of the data that correspond to when the cell is in status ‘rest’, which mean the cell is not charging or discharging, but just resting, as this data is not needed for the calculation of delta V. Below we are essentially saying: take the row of the dataframe were values from column ‘Status’ are not equal to ‘Rest’. df=df[df['Status'] != 'Rest'] On the block of code, we first take the row of the dataframe were values from column ‘Status’ are equal to ‘CC_DChg’ for the discharge curves (df_disch) and equal to ‘CCCV_Chg’ for the charge curves (df_charg). Then, for the discharge curves, and similarly for the charge curves, we group all values that have all the same step values and take the average. However, we are here only interested in the average of the voltage for each steps as well as the cycle numbers. df_disch=df[df['Status']=='CC_DChg'].groupby('Step').mean(numeric_only=True) df_charg=df[df['Status']=='CCCV_Chg'].groupby('Step').mean(numeric_only=True) We then merge both dataframe df_disch and df_charg into a single dataframe df0. We do this merging such that the cycle number value are the same for both for a single row in df0. df0=pd.merge(df_disch, df_charg, on='Cycle', how='outer') We then substract the value of average voltage for charge steps from the average voltage for discharge steps. df0['delta_V'] = df0['Voltage(V)_y'] - df0['Voltage(V)_x'] We then reorganise the data so that it can be plotted as delta V versus cycle number. df01=df0.set_index('Cycle') df2=df01['delta_V'].to_frame().reset_index() df2.plot(x = 'Cycle', y='delta_V',kind='scatter',ylim=(0,0.2)) The result is the following graph: Graph of delta V as function of cycle number.]]></summary></entry><entry><title type="html">Installing Gromacs on Windows subsystem for Linux.</title><link href="https://robygauthier.github.io/coding,/chemistry/2023/04/26/Gromacs_Windows.html" rel="alternate" type="text/html" title="Installing Gromacs on Windows subsystem for Linux."/><published>2023-04-26T17:27:00-04:00</published><updated>2023-04-26T17:27:00-04:00</updated><id>https://robygauthier.github.io/coding,/chemistry/2023/04/26/Gromacs_Windows</id><content type="html" xml:base="https://robygauthier.github.io/coding,/chemistry/2023/04/26/Gromacs_Windows.html"><![CDATA[<p>To install Gromacs on Windows, we first need to install the Windows subsystem for Linux. It is as easy as writing the following in the Windows Powershell app:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">wsl</span> <span class="o">--</span><span class="n">install</span></code></pre></figure> <p>Restart your computer and then open Ubuntu. Make a username and a password.</p> <p>Then you can write the following commands one at a time:</p> <p>You can verify that the installation was successful using:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">upgrade</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">cmake</span>
<span class="n">cmake</span> <span class="o">--</span><span class="n">version</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">gcc</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">build</span><span class="o">-</span><span class="n">essential</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">libfftw3</span><span class="o">-</span><span class="n">dev</span>
<span class="n">mkdir</span> <span class="n">gromacs</span><span class="o">/</span>
<span class="n">cd</span> <span class="n">gromacs</span><span class="o">/</span>
<span class="n">wget</span> <span class="n">ftp</span><span class="p">:</span><span class="o">//</span><span class="n">ftp</span><span class="p">.</span><span class="n">gromacs</span><span class="p">.</span><span class="n">org</span><span class="o">/</span><span class="n">gromacs</span><span class="o">/</span><span class="n">gromacs</span><span class="o">-</span><span class="mf">2023.1</span><span class="p">.</span><span class="n">tar</span><span class="p">.</span><span class="n">gz</span>
<span class="n">tar</span> <span class="n">xfz</span> <span class="n">gromacs</span><span class="o">-</span><span class="mf">2023.1</span><span class="p">.</span><span class="n">tar</span><span class="p">.</span><span class="n">gz</span>
<span class="n">cd</span> <span class="n">gromacs</span><span class="o">-</span><span class="mf">2023.1</span>
<span class="n">mkdir</span> <span class="n">build</span>
<span class="n">cd</span> <span class="n">build</span>
<span class="n">cmake</span> <span class="p">..</span> <span class="o">-</span><span class="n">DGMX_BUILD_OWN_FFTW</span><span class="o">=</span><span class="n">ON</span> <span class="o">-</span><span class="n">DREGRESSIONTEST_DOWNLOAD</span><span class="o">=</span><span class="n">ON</span>
<span class="n">make</span>
<span class="n">make</span> <span class="n">check</span>
<span class="n">sudo</span> <span class="n">make</span> <span class="n">install</span>
<span class="n">source</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">gromacs</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">GMXRC</span></code></pre></figure> <p>To verify if the installation worked as expected, you can write the following code:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">gmx</span> <span class="o">-</span><span class="n">version</span></code></pre></figure> <p>That’s it! You are now ready to use Gromacs on Windows!</p>]]></content><author><name></name></author><category term="coding,"/><category term="chemistry"/><category term="coding,"/><category term="chemistry"/><summary type="html"><![CDATA[To install Gromacs on Windows, we first need to install the Windows subsystem for Linux. It is as easy as writing the following in the Windows Powershell app: wsl --install Restart your computer and then open Ubuntu. Make a username and a password. Then you can write the following commands one at a time: You can verify that the installation was successful using: sudo apt-get update sudo apt-get upgrade sudo apt-get install cmake cmake --version sudo apt-get install gcc sudo apt-get install build-essential sudo apt-get install libfftw3-dev mkdir gromacs/ cd gromacs/ wget ftp://ftp.gromacs.org/gromacs/gromacs-2023.1.tar.gz tar xfz gromacs-2023.1.tar.gz cd gromacs-2023.1 mkdir build cd build cmake .. -DGMX_BUILD_OWN_FFTW=ON -DREGRESSIONTEST_DOWNLOAD=ON make make check sudo make install source /usr/local/gromacs/bin/GMXRC To verify if the installation worked as expected, you can write the following code: gmx -version That’s it! You are now ready to use Gromacs on Windows!]]></summary></entry><entry><title type="html">Installing and running Psi4 on a HPC cluster.</title><link href="https://robygauthier.github.io/coding,/chemistry/2023/04/15/Psi4.html" rel="alternate" type="text/html" title="Installing and running Psi4 on a HPC cluster."/><published>2023-04-15T15:50:00-04:00</published><updated>2023-04-15T15:50:00-04:00</updated><id>https://robygauthier.github.io/coding,/chemistry/2023/04/15/Psi4</id><content type="html" xml:base="https://robygauthier.github.io/coding,/chemistry/2023/04/15/Psi4.html"><![CDATA[<p>Psi4 is a open source quantum chemistry software similar to Gaussian. It is used to mainly calculate energies and optimize geometries of isolated molecules, among other possible outputs.</p> <p>Psi4 can be installed by first creating a Conda environment and then installing Psi4 using Conda install:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">spack</span> <span class="n">load</span> <span class="n">miniconda3</span>
<span class="n">conda</span> <span class="n">create</span> <span class="o">-</span><span class="n">n</span> <span class="n">dft</span>
<span class="n">conda</span> <span class="n">activate</span> <span class="n">dft</span>
<span class="n">conda</span> <span class="n">install</span> <span class="o">-</span><span class="n">c</span> <span class="n">psi4</span> <span class="n">psi4</span></code></pre></figure> <p>You can verify that the installation was successful using:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="n">psi4</span> <span class="o">--</span><span class="n">test</span></code></pre></figure> <p>After this, we are ready for our first calculation. Here, we will optimize the geometry of methanol in a hypothetical solvent that has a static permittivity of 30 and dynamic permittivity of 2. The input file can be made using the software vim. The extension .in can be used. See the input file below:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="c1"># Methanol b3lyp opt pcm  6-311++G(2df,2pd)
</span>
<span class="n">molecule</span> <span class="n">Methanol</span> <span class="p">{</span>
<span class="mi">0</span> <span class="mi">1</span>
   <span class="n">C</span>       <span class="o">-</span><span class="mf">6.11036</span>        <span class="mf">2.62726</span>        <span class="mf">0.00000</span>
   <span class="n">O</span>       <span class="o">-</span><span class="mf">5.04036</span>        <span class="mf">2.62726</span>        <span class="mf">0.00000</span>
   <span class="n">H</span>       <span class="o">-</span><span class="mf">6.46703</span>        <span class="mf">2.09091</span>       <span class="o">-</span><span class="mf">0.85441</span>
   <span class="n">H</span>       <span class="o">-</span><span class="mf">6.46703</span>        <span class="mf">3.63537</span>       <span class="o">-</span><span class="mf">0.03729</span>
   <span class="n">H</span>       <span class="o">-</span><span class="mf">6.46703</span>        <span class="mf">2.15549</span>        <span class="mf">0.89170</span>
   <span class="n">H</span>       <span class="o">-</span><span class="mf">4.71703</span>        <span class="mf">3.05493</span>       <span class="o">-</span><span class="mf">0.80836</span>
<span class="p">}</span>

<span class="n">memory</span> <span class="mi">2000</span> <span class="n">mb</span>
<span class="nb">set</span> <span class="n">basis</span> <span class="mi">6</span><span class="o">-</span><span class="mi">311</span><span class="o">++</span><span class="nc">G</span><span class="p">(</span><span class="mi">2</span><span class="n">df</span><span class="p">,</span><span class="mi">2</span><span class="n">pd</span><span class="p">)</span>

<span class="nb">set</span> <span class="n">pcm</span> <span class="n">true</span>

<span class="n">pcm</span> <span class="o">=</span> <span class="p">{</span>
<span class="n">Units</span> <span class="o">=</span> <span class="n">Angstrom</span>
<span class="n">Medium</span> <span class="p">{</span>
<span class="n">SolverType</span> <span class="o">=</span> <span class="n">IEFPCM</span>
<span class="n">Solvent</span> <span class="o">=</span> <span class="n">Explicit</span>
<span class="n">Proberadius</span> <span class="o">=</span> <span class="mf">1.5</span>
<span class="n">GREEN</span><span class="o">&lt;</span><span class="n">INSIDE</span><span class="o">&gt;</span>
  <span class="p">{</span>
  <span class="n">TYPE</span><span class="o">=</span><span class="n">VACUUM</span>
  <span class="p">}</span>

<span class="n">GREEN</span><span class="o">&lt;</span><span class="n">OUTSIDE</span><span class="o">&gt;</span>
  <span class="p">{</span>
  <span class="n">TYPE</span><span class="o">=</span><span class="n">UNIFORMDIELECTRIC</span>
  <span class="n">eps</span><span class="o">=</span><span class="mi">30</span>
  <span class="n">epsdyn</span><span class="o">=</span><span class="mf">2.0</span>
  <span class="p">}</span>
 <span class="p">}</span> 

<span class="n">Cavity</span> <span class="p">{</span>
<span class="n">RadiiSet</span> <span class="o">=</span> <span class="n">UFF</span>
<span class="n">Type</span> <span class="o">=</span> <span class="n">GePol</span>
<span class="n">Scaling</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">Area</span> <span class="o">=</span> <span class="mf">0.3</span>
<span class="n">Mode</span> <span class="o">=</span> <span class="n">Implicit</span>
 <span class="p">}</span>
<span class="p">}</span>

<span class="nf">optimize</span><span class="p">(</span><span class="sh">'</span><span class="s">b3lyp</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <p>The above input file as four section: 1) The geometry, charge and multiplicity of the molecule, 2) The memory needed and the basis set used, 3) The PCM section and the 4) optimization section which also include the functional being used. For the first section, methanol is neutral and as a multiplicity of one so we input 0 1. For more information, visit the Psi4 website: https://psicode.org/.</p> <p>Then we can create a slurm shell script that will run the input file on the cluster using 16 cores and 2 GB of memory within one node:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
<span class="c1">#!/bin/bash
#SBATCH -J test # Job name
#SBATCH -n 16 # Number of total cores
#SBATCH -N 1 # Number of nodes
#SBATCH -A accountname
#SBATCH -p cpu
#SBATCH -t 2-00:00:00
#SBATCH --mem-per-cpu=2000 # Memory pool for all cores in MB
#SBATCH -e test_%j.err
#SBATCH -o test_%j.out # File to which STDOUT will be written %j is the job #
</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">Job started on `hostname` at `date`</span><span class="sh">"</span>
<span class="c1">#source activate envname
</span>
<span class="n">psi4</span> <span class="o">-</span><span class="n">i</span> <span class="n">Methanol</span><span class="p">.</span><span class="ow">in</span> <span class="o">-</span><span class="n">o</span> <span class="n">Methanol</span><span class="p">.</span><span class="n">out</span> <span class="o">-</span><span class="n">n</span> <span class="mi">16</span> 

<span class="n">echo</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span>
<span class="n">echo</span> <span class="sh">"</span><span class="s">Job Ended at `date`</span><span class="sh">"</span></code></pre></figure> <p>This gives us an output file named Methanol.out. The file contain many different sections including the following (here for a different molecule):</p> <p>The energetics:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> 
   <span class="o">=&gt;</span> <span class="n">Energetics</span> <span class="o">&lt;=</span>

    <span class="n">Nuclear</span> <span class="n">Repulsion</span> <span class="n">Energy</span> <span class="o">=</span>            <span class="mf">246.2616948092595237</span>
    <span class="n">One</span><span class="o">-</span><span class="n">Electron</span> <span class="n">Energy</span> <span class="o">=</span>                <span class="o">-</span><span class="mf">955.2363591967575758</span>
    <span class="n">Two</span><span class="o">-</span><span class="n">Electron</span> <span class="n">Energy</span> <span class="o">=</span>                 <span class="mf">401.7398237144908535</span>
    <span class="n">DFT</span> <span class="n">Exchange</span><span class="o">-</span><span class="n">Correlation</span> <span class="n">Energy</span> <span class="o">=</span>     <span class="o">-</span><span class="mf">35.2864968681339377</span>
    <span class="n">Empirical</span> <span class="n">Dispersion</span> <span class="n">Energy</span> <span class="o">=</span>           <span class="mf">0.0000000000000000</span>
    <span class="n">VV10</span> <span class="n">Nonlocal</span> <span class="n">Energy</span> <span class="o">=</span>                  <span class="mf">0.0000000000000000</span>
    <span class="n">PCM</span> <span class="n">Polarization</span> <span class="n">Energy</span> <span class="o">=</span>              <span class="o">-</span><span class="mf">0.0205233877998851</span>
    <span class="n">Total</span> <span class="n">Energy</span> <span class="o">=</span>                       <span class="o">-</span><span class="mf">342.5418609289409915</span>

<span class="n">Computation</span> <span class="n">Completed</span></code></pre></figure> <p>The multipole moment:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"> <span class="n">Multipole</span> <span class="n">Moments</span><span class="p">:</span>

 <span class="o">------------------------------------------------------------------------------------</span>
     <span class="n">Multipole</span>            <span class="nc">Electronic </span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">u</span><span class="p">.)</span>      <span class="nc">Nuclear  </span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">u</span><span class="p">.)</span>        <span class="nc">Total </span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">u</span><span class="p">.)</span>
 <span class="o">------------------------------------------------------------------------------------</span>

 <span class="n">L</span> <span class="o">=</span> <span class="mf">1.</span>  <span class="n">Multiply</span> <span class="n">by</span> <span class="mf">2.5417464519</span> <span class="n">to</span> <span class="n">convert</span> <span class="p">[</span><span class="n">e</span> <span class="n">a0</span><span class="p">]</span> <span class="n">to</span> <span class="p">[</span><span class="n">Debye</span><span class="p">]</span>
 <span class="n">Dipole</span> <span class="n">X</span>            <span class="p">:</span>          <span class="mf">3.3167002</span>           <span class="o">-</span><span class="mf">6.2663852</span>           <span class="o">-</span><span class="mf">2.9496850</span>
 <span class="n">Dipole</span> <span class="n">Y</span>            <span class="p">:</span>         <span class="o">-</span><span class="mf">0.0029510</span>            <span class="mf">0.0031883</span>            <span class="mf">0.0002373</span>
 <span class="n">Dipole</span> <span class="n">Z</span>            <span class="p">:</span>         <span class="o">-</span><span class="mf">0.0083102</span>            <span class="mf">0.0113474</span>            <span class="mf">0.0030372</span>
 <span class="n">Magnitude</span>           <span class="p">:</span>                                                    <span class="mf">2.9496866</span>

 <span class="o">------------------------------------------------------------------------------------</span></code></pre></figure> <p>As well as the optimized geometry. This is very useful for a multiple list of scientific tasks.</p>]]></content><author><name></name></author><category term="coding,"/><category term="chemistry"/><category term="coding,"/><category term="chemistry"/><summary type="html"><![CDATA[Psi4 is a open source quantum chemistry software similar to Gaussian. It is used to mainly calculate energies and optimize geometries of isolated molecules, among other possible outputs. Psi4 can be installed by first creating a Conda environment and then installing Psi4 using Conda install: spack load miniconda3 conda create -n dft conda activate dft conda install -c psi4 psi4 You can verify that the installation was successful using: psi4 --test After this, we are ready for our first calculation. Here, we will optimize the geometry of methanol in a hypothetical solvent that has a static permittivity of 30 and dynamic permittivity of 2. The input file can be made using the software vim. The extension .in can be used. See the input file below: # Methanol b3lyp opt pcm 6-311++G(2df,2pd) molecule Methanol { 0 1 C -6.11036 2.62726 0.00000 O -5.04036 2.62726 0.00000 H -6.46703 2.09091 -0.85441 H -6.46703 3.63537 -0.03729 H -6.46703 2.15549 0.89170 H -4.71703 3.05493 -0.80836 } memory 2000 mb set basis 6-311++G(2df,2pd) set pcm true pcm={ Units=Angstrom Medium { SolverType=IEFPCM Solvent=Explicit Proberadius=1.5 GREEN&lt;INSIDE&gt; { TYPE=VACUUM } GREEN&lt;OUTSIDE&gt; { TYPE=UNIFORMDIELECTRIC eps=30 epsdyn=2.0 } } Cavity { RadiiSet=UFF Type=GePol Scaling=False Area=0.3 Mode=Implicit } } optimize('b3lyp') The above input file as four section: 1) The geometry, charge and multiplicity of the molecule, 2) The memory needed and the basis set used, 3) The PCM section and the 4) optimization section which also include the functional being used. For the first section, methanol is neutral and as a multiplicity of one so we input 0 1. For more information, visit the Psi4 website: https://psicode.org/. Then we can create a slurm shell script that will run the input file on the cluster using 16 cores and 2 GB of memory within one node: #!/bin/bash #SBATCH -J test # Job name #SBATCH -n 16 # Number of total cores #SBATCH -N 1 # Number of nodes #SBATCH -A accountname #SBATCH -p cpu #SBATCH -t 2-00:00:00 #SBATCH --mem-per-cpu=2000 # Memory pool for all cores in MB #SBATCH -e test_%j.err #SBATCH -o test_%j.out # File to which STDOUT will be written %j is the job # echo "Job started on `hostname` at `date`" #source activate envname psi4 -i Methanol.in -o Methanol.out -n 16 echo " " echo "Job Ended at `date`" This gives us an output file named Methanol.out. The file contain many different sections including the following (here for a different molecule): The energetics: =&gt; Energetics &lt;= Nuclear Repulsion Energy=246.2616948092595237 One-Electron Energy=-955.2363591967575758 Two-Electron Energy=401.7398237144908535 DFT Exchange-Correlation Energy=-35.2864968681339377 Empirical Dispersion Energy=0.0000000000000000 VV10 Nonlocal Energy=0.0000000000000000 PCM Polarization Energy=-0.0205233877998851 Total Energy=-342.5418609289409915 Computation Completed The multipole moment: Multipole Moments: ------------------------------------------------------------------------------------ Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.) ------------------------------------------------------------------------------------ L=1. Multiply by 2.5417464519 to convert [e a0] to [Debye] Dipole X : 3.3167002 -6.2663852 -2.9496850 Dipole Y : -0.0029510 0.0031883 0.0002373 Dipole Z : -0.0083102 0.0113474 0.0030372 Magnitude : 2.9496866 ------------------------------------------------------------------------------------ As well as the optimized geometry. This is very useful for a multiple list of scientific tasks.]]></summary></entry><entry><title type="html">What is the process behind picking a specific cathode material for lithium-ion batteries?</title><link href="https://robygauthier.github.io/battery/2023/03/07/cathode-material-for-lithium-ion-batteries.html" rel="alternate" type="text/html" title="What is the process behind picking a specific cathode material for lithium-ion batteries?"/><published>2023-03-07T20:02:00-05:00</published><updated>2023-03-07T20:02:00-05:00</updated><id>https://robygauthier.github.io/battery/2023/03/07/cathode-material-for-lithium-ion-batteries</id><content type="html" xml:base="https://robygauthier.github.io/battery/2023/03/07/cathode-material-for-lithium-ion-batteries.html"><![CDATA[<div class="row mt-3"> <div class="col"> <figure> <picture> <img src="/assets/img/GW.png" class="img-fluid rounded z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Pictures of John Goodenough and M. Stanley Whittingham, two of the three Nobel prize winner in chemistry for 2019 for their discoveries that made possible the lithium-ion battery. </div> </div> <div class="col-7"> <figure> <picture> <img src="/assets/img/LiCoO2.png" class="img-fluid rounded z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The atomic structure of LiTiS2, LiCoO2, LiNiO2 and NMC. </div> </div> </div> <p>What is the process behind picking a specific cathode material for lithium-ion batteries? I and my previous co-writer Shagun Maheshwari had a similar question from a reader on our first article titled <a href="https://robygauthier.github.io/teaching/"> “Introduction to Lithium-ion batteries.”</a> Why is cobalt needed in some cathode materials, and how we discovered the cathode materials used today, like lithium nickel manganese cobalt oxide (NMC) and lithium iron phosphate (LFP) cathode materials? I wanted to reply to these questions here. Interestingly, the reply to these questions is majoritarily historical.</p> <p>In the early 70s, <a href="https://en.wikipedia.org/wiki/M._Stanley_Whittingham"> M. Stanley Whittingham </a> joined Exxon to study layered sulfides as superconductors, like tantalum disulfide. That’s when he and his colleagues started to intercalate electron donors into the layered structures to change the superconducting transition temperature. By studying the system carefully, they found out that those materials were able to store a lot of energy reversibly as electrochemical energy. The first rechargeable lithium battery was born. Exxon saw the potential and invested in the research with the goal of eventually making electric cars. That’s when they came up with lithium titanium disulfide (LiTiS2), using titanium instead of tantalum due to the lower density resulting in better specific energy density. While this is interesting, this still doesn’t directly answer our question. However, it was the spark that was needed to eventually light up the flame.</p> <p>In 1980 and beforehand, <a href="https://en.wikipedia.org/wiki/John_B._Goodenough"> John Goodenough</a> and his team, based in Oxford, were looking at the magnetic properties of LiCoO2. When they read M. Stanley Whittingham’s work about a rechargeable lithium battery made using LiTiS2 as a cathode, they noticed how LiCoO2 had the same structure as LiTiS2. Out of curiosity, they decided to study the performance of LiCoO2 as a cathode material in a rechargeable lithium battery. They were very happy when they saw that it not only worked but the material was also able to store way more energy than LiTiS2. This was due to the higher average voltage versus the lithium reference electrode, thanks to the stronger Li - O bonds compared to the weaker Li - S bonds. This was the beginning of a revolution that Sony would eventually turn into a product in 1991 after the discovery that carbon could be used as an anode. The LiCoO2/C lithium-ion battery was commercialized.</p> <p>While LiCoO2 does contain cobalt, one could wonder how we went from LiCoO2 to the NMC material used today that contains not only cobalt but also manganese and nickel. First, it is interesting to know that John Goodenough was also studying LiNiO2 around that time, and the work of J.C. Hunter in 1981 and M.M. Thackeray and coworkers, under the supervision of Goodenough in 1983, allowed to discover that LiMn2O4 was also potentially useful as a cathode material. However, Jeff Dahn discovered that LiNiO2 was unsafe after one of his coin cells exploded during the building process.</p> <p>In 2001, in an attempt to make cheaper and safer cathode materials that have higher capacity, <a href="https://en.wikipedia.org/wiki/Jeff_Dahn">Jeff Dahn</a> and Zhonghua Lu had the brilliant idea to combine all of them into one material to create NMC, which resulted in the modern cathode.</p> <p>In conclusion, the discovery of the cathode material NMC was made possible by trial and error experiments, curiosity, creativity, and interdisciplinary research. This really shows why thinking outside the box is vital in the scientific world; you never know what discoveries await.</p>]]></content><author><name></name></author><category term="battery"/><category term="battery"/><summary type="html"><![CDATA[Pictures of John Goodenough and M. Stanley Whittingham, two of the three Nobel prize winner in chemistry for 2019 for their discoveries that made possible the lithium-ion battery. The atomic structure of LiTiS2, LiCoO2, LiNiO2 and NMC.]]></summary></entry></feed>